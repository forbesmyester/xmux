#!/bin/bash

set -euo pipefail
IFS=$'\n\t'

function ttmux() {
    local CS="$(xmux current_socket)"
    if [ "$CS" == "$1" ]; then
        shift 1
        tmux $@
        return
    fi
    tmux -L $@
}


function current_socket() {
    if [ ! -z "${TMUX-}" ]; then
    local A=''
    local A="${TMUX%%,*}"
    echo "${A##*/}"
    fi
}


function list_socket() {
    local CS="$(current_socket)"
    set +e
    echo "$CS"
    find /tmp/tmux-$UID -type s | parallel tmux -S {} list-session '>/dev/null' '2>/dev/null' '&&' echo "{}" | sed 's/.*\///' | grep -v "$CS"
    set -e
}


function list_session_in_socket() {
    ttmux "$1" list-session
}


function list_session() {
    export -f list_session_in_socket
    function tl {
        list_session_in_socket "$1" | sed 's/\:.*//' | sed "s/^/-1 0x0000000 ${1}:/"
    }
    export -f tl
    export -f ttmux
    list_socket | parallel tl {}
}


function current_session() {
    ttmux "$1" list-window  -F '#{session_name}' | head -n1
}


function list_window() {
    ttmux "$1" list-window -t "$2" -F '#{window_id} #{window_name}'
}


function list_pane() {
    ttmux "$1" list-pane -t "${2}:$3" -F '#D'
}


function current_window() {
    ttmux "$1" list-window -t "$2" -F '#{window_active} #{window_id} #{window_name}' | awk '$1 == 1 { print $0 }' | sed 's/. \+//'
}


function current_pane() {
    ttmux "$1" list-pane -t "${2}:$3" -F '#{pane_active} #D' | awk '$1 == 1 { print $0 }' | sed 's/. \+//'
}


function new_launch() {
    local SOCKET_NAME="$1"
    local SESSION_NAME="$2"
    local CONFIG_FILE='-q'
    local CONFIG_FILE_OPT='-q'
    if [ -f "$HOME/.xmux.conf" ]; then
        CONFIG_FILE_OPT='-f'
        CONFIG_FILE="$HOME/.xmux.conf"
    fi
    echo ttmux "$SOCKET_NAME" "$CONFIG_FILE_OPT" "$CONFIG_FILE" new-session -s "$SESSION_NAME"
    ttmux "$SOCKET_NAME" "$CONFIG_FILE_OPT" "$CONFIG_FILE" new-session -s "$SESSION_NAME"
}


function exists() {
    local SOCKET_NAME="$1"
    local SESSION_NAME="$2"
    local LOOP_COUNT="0"
    local TMUX_SESSION_COUNT="0"
    if ! ttmux "$SOCKET_NAME" list-sessions >/dev/null 2>/dev/null; then
        return 1
    fi
    if ttmux "$SOCKET_NAME" list-sessions 2>&1 | grep "^$SESSION_NAME" > /dev/null; then
        return 0
    fi
    return 1
}


function on_desktop() {
    local SOCKET_NAME="$1"
    local SESSION_NAME="$2"
    if exists "$1" "$2"; then
        echo "X"
    fi
}


function wait_for() {
    local SOCKET_NAME="$1"
    local SESSION_NAME="$2"
    local LOOP_COUNT="0"
    local TMUX_SESSION_COUNT="0"
    local CURRENT_SOCKET="$(current_socket)"
    local CURRENT_SESSION="$(current_session "$CURRENT_SOCKET")"

    if [ "$CURRENT_SOCKET" == "$SOCKET_NAME" ] && [ "$CURRENT_SESSION" == "$SESSION_NAME" ]; then
        return
    fi

    while [ "$LOOP_COUNT" -lt 50 ] && [ "$TMUX_SESSION_COUNT" -lt 1 ]; do
        if ttmux "$SOCKET_NAME" list-sessions 2>&1 | grep "^$SESSION_NAME" > /dev/null; then
            TMUX_SESSION_COUNT=1
        fi
        LOOP_COUNT=$((LOOP_COUNT + 1))
        sleep 0.1
    done
    if [ "$TMUX_SESSION_COUNT" -lt 1 ]; then
        echo "echo Could not re-attach to session"
        exit 1
    fi
}


function title() {
    XMUX_SET_TITLE=${XMUX_SET_TITLE:-1}
    if [ "$XMUX_SET_TITLE" -eq 1 ]; then
        local SOCKET_NAME="$1"
        ttmux "$SOCKET_NAME" set-option -g set-titles-string 'xmux #(xmux current_socket)/#S:#{window_id}.#D - #T'
        ttmux "$SOCKET_NAME" set-option -g set-titles on
    fi
}


function configure() {
    local SOCKET_NAME="$1"
    local SESSION_NAME="$2"
    wait_for "$SOCKET_NAME" "$SESSION_NAME"
    test -f "$HOME/.xmux.post" && ttmux "$SOCKET_NAME" source-file "$HOME/.xmux.post"
    title "$SOCKET_NAME"
}


function socket_name_from_directory() {
    local PROSP
    # PROSP="$( [ -z "$KAKOUNE_SESSION" ] && echo "$KAKOUNE_SESSION" || git rev-parse --show-toplevel 2> /dev/null || echo "$PWD" )"
    PROSP="$( git rev-parse --show-toplevel 2> /dev/null | sed 's/.*\///' || echo "$PWD" )"
    if [ ! -z "${KAKOUNE_SESSION-}" ]; then
        PROSP="$KAKOUNE_SESSION"
    fi
    echo $PROSP | tr '[:upper:]' '[:lower:]' | sed 's/[^A-Za-z0-9]/_/g' | sed 's/^_\+//' | sed 's/__\+/_/' | sed 's/_\+$//'
}


function delay_title() {
    sleep 2
    title "$1"
}


function new() {

    local SOCKET_NAME=''
    local SESSION_NAME=''
    local CURRENT_SESSION=''
    local CURRENT_SOCKET=''

    if [ "$#" -gt 0 ]; then
        SOCKET_NAME="$1"
    else
        SOCKET_NAME="$(list_session | awk '$1==1 { print $3 }' | sed 's/\:[^\:]\+//')"
        if [ "${#SOCKET_NAME}" -eq 0 ]; then
            SOCKET_NAME="$(socket_name_from_directory)"
        fi
    fi

    # test "$#" -gt 1 && SESSION_NAME="$2" || SESSION_NAME="$(socket_name_from_directory)"
    test "$#" -gt 1 && SESSION_NAME="$2" || SESSION_NAME="default"
    CURRENT_SOCKET="$(current_socket)"
    if [ "$CURRENT_SOCKET" != "" ]; then
        CURRENT_SESSION="$(current_session "$CURRENT_SOCKET")"
    fi

    if [ "$CURRENT_SOCKET" == "$SOCKET_NAME" ] && [ "$CURRENT_SESSION" == "$SESSION_NAME" ]; then
        tmux split-window -v -c '#{pane_current_path}'
        CURRENT_WINDOW="$(current_window "$CURRENT_SOCKET" "$CURRENT_SESSION" | sed 's/ .*//')"
        CURRENT_PANE="$(current_pane "$CURRENT_SOCKET" "$CURRENT_SESSION" "$CURRENT_WINDOW")"
        echo "$CURRENT_WINDOW $CURRENT_PANE"
        exit
    fi

    configure "$SOCKET_NAME" "$SESSION_NAME" &
    delay_title "$SOCKET_NAME" &
    new_launch "$SOCKET_NAME" "$SESSION_NAME"
}


function key() {
    local SOCKET_NAME="$1"
    local SESSION_NAME="$2"
    local PANE="1"
    local KEY="$3"
    wait_for "$SOCKET_NAME" "$SESSION_NAME"
    if [ "$#" -eq 4 ]; then
        SESSION_NAME="$SESSION_NAME:$3"
        KEY="$4"
    fi
    if [ "$#" -eq 5 ]; then
        SESSION_NAME="${SESSION_NAME}:${3}.${4}"
        KEY="$5"
    fi
    ttmux "$SOCKET_NAME" send-keys -t "$SESSION_NAME" "$KEY"
}


function send() {
    local SOCKET_NAME="$1"
    local SESSION_NAME="$2"
    local AS_LINES="$3"
    wait_for "$SOCKET_NAME" "$SESSION_NAME"
    if [ "$#" -eq 4 ]; then
        SESSION_NAME="$SESSION_NAME:$3"
        AS_LINES="$4"
    fi
    if [ "$#" -eq 5 ]; then
        SESSION_NAME="${SESSION_NAME}:${3}.${4}"
        AS_LINES="$5"
    fi
    if [ "$AS_LINES" -gt 0 ]; then
        # AWK always seems to put a new line at the end...
        cat /dev/stdin | awk '{ print $0 }' | ttmux "$SOCKET_NAME" loadb -b xmux_paste -
    else
        cat /dev/stdin | ttmux "$SOCKET_NAME" loadb -b xmux_paste -
    fi
    ttmux "$SOCKET_NAME" paste-buffer -b xmux_paste -t "$SESSION_NAME"
}


function ensure() {
    if list_session | grep -F "$1:$2"; then
        exit 0
    fi
    exit 1
}


if [ "$#" -lt 1 ]; then
    exit 0
fi

if [ "$1" == '--help' ]; then
    echo "USAGE:"
    echo ""
    echo "$0 list-socket - Lists SESSION"
    echo "$0 list-session [SESSION] - List SESSIONS and CONSOLE, optionally filltered by SESSION"
    echo "$0 list-window SOCKET SESSION (listed as WINDOW_ID / WINDOW_NAME"
    echo "$0 list-pane SOCKET SESSION WINDOW_ID/WINDOW_NAME"
    echo ""
    echo "$0 current-socket Show the current SOCKET (if there is one)"
    echo "$0 current-session SOCKET Show the current SESSION (if there is one)"
    echo "$0 current-window SOCKET SESSION (listed as WINDOW_ID / WINDOW_NAME)"
    echo "$0 current-pane SOCKET SESSION WINDOW_ID/WINDOW_NAME"
    echo ""
    echo "$0 ensure SOCKET SESSION check if a SOCKET/SESSION combination exists "
    echo "$0 wait-for SOCKET SESSION wait for SOCKET/SESSION combination to be running "
    echo "$0 new [SOCKET] [SESSION] Start a new SESSION where SOCKET and SESSION can be specified or guessed"
    echo ""
    echo "$0 chars SOCKET SESSION [WINDOW] [PANE] Send characters from STDIN to SOCKET/SESSION/WINDOW/PANE"
    echo "$0 lines SOCKET SESSION [WINDOW] [PANE] Send characters from STDIN to SOCKET/SESSION/WINDOW/PANE with an Enter key press if it does not already end in one"
    echo "$0 nl SOCKET SESSION [WINDOW] [PANE] Send an Enter key press to SOCKET/SESSION/WINDOW/PANE"
    echo "$0 ctrl_c SOCKET SESSION [WINDOW] [PANE] Send an Ctrl-C key press to SOCKET/SESSION/WINDOW/PANE"
    echo "$0 key SOCKET SESSION [WINDOW] [PANE] <key> Send an Ctrl-C key press to SOCKET/SESSION/WINDOW/PANE"
    exit
fi

if [ "$1" == 'ensure' ]; then
    ensure "$2" "$3"
    exit
fi

# if [ "$1" == 'ensure_desktop' ]; then
#     ensure_desktop "$2" "$3"
#     exit
# fi

if [ "$1" == 'list_socket' ] || [ "$1" == 'list-socket' ]; then
    list_socket
    exit
fi

if [ "$1" == 'wait_for' ] || [ "$1" == 'wait-for' ]; then
    wait_for "$2" "$3"
    exit
fi

if [ "$1" == 'current_socket' ] || [ "$1" == 'current-socket' ]; then
    current_socket
    exit
fi


if [ "$1" == 'current_session' ] || [ "$1" == 'current-session' ]; then
    current_session "$2"
    exit
fi


if [ "$1" == 'list_session' ] || [ "$1" == 'list-session' ]; then
    if [ "$#" -gt 1 ]; then
        list_session_in_socket "$2"
        exit
    fi
    list_session
    exit
fi

if [ "$1" == 'list_window' ] || [ "$1" == 'list-window' ]; then
    list_window "$2" "$3"
    exit
fi

if [ "$1" == 'list_pane' ] || [ "$1" == 'list-pane' ]; then
    list_pane "$2" "$3" "$4"
    exit
fi

if [ "$1" == 'current_window' ] || [ "$1" == 'current-window' ]; then
    current_window "$2" "$3"
    exit
fi

if [ "$1" == 'current_pane' ] || [ "$1" == 'current-pane' ]; then
    current_pane "$2" "$3" "$4"
    exit
fi

if [ "$1" == 'new' ]; then
    shift 1
    new $@
    XMUX_SET_TITLE=${XMUX_SET_TITLE:-1}
    if [ "$XMUX_SET_TITLE" -eq 1 ]; then
        echo -ne "\033]0;$TERM\007";
    fi
    exit
fi

if [ "$1" == 'configure' ]; then
    configure "$2" "$3"
    exit
fi

if [ "$1" == 'chars' ]; then
    shift 1
    send $@ 0
    exit
fi

if [ "$1" == 'lines' ]; then
    shift 1
    send $@ 1
    exit
fi

if [ "$1" == 'nl' ]; then
    shift 1
    echo '' | send $@ 1
    exit
fi

if [ "$1" == 'ctrl_c' ]; then
    shift 1
    key $@ "C-c"
    exit
fi

if [ "$1" == 'key' ]; then
    shift 1
    key $@
    exit
fi

if [ "$1" == 'exists' ]; then
    exists "$2" "$3"
    exit
fi

if [ "$1" == 'splith' ]; then
    tmux split-window -h -c '#{pane_current_path}'
    exit
fi

if [ "$1" == 'splitv' ]; then
    tmux split-window -v -c '#{pane_current_path}'
    exit
fi


if [ "$1" == 'list_visible_socket' ]; then
    list_visible_socket
    exit
fi

WAIT_JOBS=$(jobs -p)
if [ "${#WAIT_JOBS}" -gt 0 ]; then
    while [ "$WAIT_JOBS" -gt 0 ]; do
        sleep 1
        echo "> GOING"
        WAIT_JOBS=$(jobs -p)
    done
fi
